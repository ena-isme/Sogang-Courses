20211547_신지원 
// 토의(팀플) 전 개인적인 요약

은총알이 없는 이유

소프트웨어의 발전에 비해 하드웨어의 발전 속도가 지나치게 빠르며 소프트웨어의 기술이 어렵기에 소프트웨어 구축의 중요성이 대두된다. 이에 소프트웨어의 특징을 살펴보자면, 복잡성, 적합성, 변경 가능성, 비가시성 으로 구분된다. 소프트웨어는 비선형적이기에 더욱 복잡하며, 이러한 특징은 재설계만으로는 해결할 수 없기 때문에 적합성이 요구된다. 추가로 수정과 재사용 등을 위한 변경 가능성과 기하학적 추상화의 도구라는 점에서 비가시성이라는 특징을 가지고 있다.

=> 화자는 비가시성을 이야기 하면서 “These graphs are usually not even planar, much less hierarchical. Indeed, one of the ways of establishing conceptual control over such structure is to enforce link cutting until one or more of the graphs becomes hierarchical.” 라고 주장하였다. 일반적으로 설계를 시작할 때 소프트웨어의 구조는 덜 계층적인 그래프로 나타나기 때문에 하나 이상의 그래프가 계층적이 될 때까지 link cutting 을 하라는 점에서 궁금증이 생겼다. 
구조화되지 않은 기반을 구조화하기 위하여 자의적으로 계층을 만들어준다고 느껴지는데 내가 생각하기에 모든 프로젝트는 Input 과 Output 이 존재하며, 이 사이를 더욱 체계적으로 만들어주기 위하여 설계자의 의도를 반영한다고 생각했다. 쉽게 말해, 계층이 정확히 나누어지는 프로젝트가 좋은 프로젝트고 그에 맞게 설계 해야되는 것 아닌가? 계층 구조가 될 때까지 link cutting 을 행해야 하는가? 
이는 설계자가 계층에 종속되어 있음을 내제하는 주장이라고 생각한다.

대체 방안 및 한계점

해결 방안으로 인공지능, 전문가 시스템, 자동프로그래밍, 그래픽 프로그래밍에 대해 이야기 하고 있다. 인공지능에서는 “The program is designed to solve a problem the way that humans seem to solve it. ,,, some abstraction or creativity is required to see how to transfer it. “ 라고 언급한 부분에서 화자는 대부분의 작업은 추상화적이기에 설계자의 창의력의 필요성을 주장하고 있다. 전문가 시스템에서는 규칙을 기반으로 추론하여 결론을 도출한 후, 테스트를 거쳐(현실 세계를 반영)구체화시켜야 하며 이를 모듈화할 수도 있다고 정리하고 있다. 그래픽 프로그래밍은 하드웨어 기술이 발전해야지만 소프트웨어의 작업의 범위가 늘어나기에 소프트웨어가 하드웨어를 종속하고 있다고 주장하였다.

한계 방안

해결 방안으로 구축하지 않고 구매하는 것이다 라는 점이 굉장히 흥미롭게 다가왔다. 또한 요구사항을 구체화시키고 신속하게 프로토타이핑 해야 한다고 주장하였는데, 고객의 요구를 완전히 충족하기가 어렵기 때문에 테스트를 진행하고 수정해 나아가야 한다고 말한다. “The approach necessitates top-down design, for it is a top-down growing of the software. It allows easy backtracking. It lends itself to early prototypes “ 라는 부분이 감명깊었고 특히 “Software construction is a creative process. Sound methodology can empower and liberate the creative mind; it cannot inflame or inspire the drudge” 이 부분이 정말 중요하다고 생각했다


하드웨어는 설계가 규칙적인 간단히 답을 내릴 수 있지만 소프트웨어는 계층화 모듈화를 위하여 더욱 인간의 창의력을 내세울 수 있다. 따라서 이 논문에서는 하드웨어가 아닌 소프트웨어의 입장이기 때문에 화자가 말한 인공지능은 사람의 지식을 기반을 한다는 입장은 적절하다고 생각한다.

하드웨어보다 소프트웨어에 더 다양한 디자인 패턴이 생성될 수 있는 것처럼, 하드웨어에 비해 소프트웨어가 더 많은 창의성을 필요로 하는 것 같다. 

화자가 말하는 좋은 디자이너는 단순히 UI/UX 를 잘 짜는 디자이너라기 보다 전반적인 기획, 디자인을 모두 구축할 수 있는 좋은 maker 를 의미한다고 받아들여졌다.

